pragma solidity ^0.8.0;

import "https://github.com/Zerocoin/Zerocoin/contracts/Zerocoin.sol";

contract MyZerocoinToken is Zerocoin {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;
    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {
        totalSupply = initialSupply;
        name = tokenName;
        symbol = tokenSymbol;
        decimals = 18;
        balanceOf[msg.sender] = totalSupply;
    }

    function mint(uint256 value) public {
        require(balanceOf[msg.sender] >= value);
        uint256 coinId = zerocoinMint(value);
        balanceOf[msg.sender] -= value;
        emit Transfer(msg.sender, address(this), value);
    }

    function spend(uint256 coinId) public {
        address recipient = zerocoinSpend(coinId);
        require(recipient != address(0));
        uint256 value = zerocoinGetValue(coinId);
        balanceOf[recipient] += value;
        emit Transfer(address(this), recipient, value);
    }
}
