pragma solidity ^0.8.0;
import "https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol";
import "./TokenBridge.sol";

contract MyStorageToken is SafeERC20 {
    TokenBridge storageBridge;
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor(address _storageNetwork) public {
        name = "My Storage Token";
        symbol = "MYST";
        decimals = 18;
        totalSupply = 1000000000000000000;
        balanceOf[msg.sender] = totalSupply;
        storageBridge = new TokenBridge(address(this), _storageNetwork);
    }

    function transfer(address _to, uint256 _value) public {
        require(balanceOf[msg.sender] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
    }
    
    function depositToStorage(bytes32 fileId, uint256 value) public {
        require(balanceOf[msg.sender] >= value);
        storageBridge.payForStorage(fileId, value);
        balanceOf[msg.sender] -= value;
    }
    
    function retrieveFromStorage(bytes32 fileId) public {
        storageBridge.getFromStorage(fileId);
    }
}
