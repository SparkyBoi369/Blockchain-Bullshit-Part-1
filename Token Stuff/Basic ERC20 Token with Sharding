pragma solidity ^0.8.0;
import "https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol";
import "./DataSharding.sol";

contract MyShardedToken is SafeERC20 {
    DataSharding dataSharding;
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    event Transfer(address indexed from, address indexed to, uint256 value);
    bytes32 shardId;
    bytes32 publicKey;
    bytes32 privateKey;
    
    constructor() public {
        name = "My Sharded Token";
        symbol = "MYST";
        decimals = 18;
        totalSupply = 1000000000000000000;
        balanceOf[msg.sender] = totalSupply;
        dataSharding = new DataSharding();
        shardId = keccak256(abi.encodePacked("MyShardedToken-Balances"));
    }

    function transfer(address _to, uint256 _value) public {
        require(balanceOf[msg.sender] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        require(dataSharding.checkIntegrity());
        
        bytes memory data = abi.encodePacked(address(this), balanceOf);
        dataSharding.editShard(shardId, data);

        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
    }
}
