class Block:
    def __init__(self, data, prev_hash, nonce):
        self.data = data
        self.prev_hash = prev_hash
        self.nonce = nonce
        self.hash = self.calculate_hash()
        
    def calculate_hash(self):
        sha = hashlib.sha256()
        sha.update(str(self.data).encode('utf-8') +
                   str(self.prev_hash).encode('utf-8') +
                   str(self.nonce).encode('utf-8'))
        return sha.hexdigest()
    
class Blockchain:
    def __init__(self):
        self.blockchain = [self.create_genesis_block()]
        self.block_reward = 10
        self.delegate_list = []
        
    def create_genesis_block(self):
        return Block('Genesis Block', '0', 0)
    
    def mine_block(self, delegate):
        last_block = self.blockchain[-1]
        data = {
            'transactions': [],
            'delegate': delegate
        }
        nonce = 0
        while True:
            block = Block(data, last_block.hash, nonce)
            if block.hash[:4] == '0000':
                self.blockchain.append(block)
                delegate.reward_tokens(self.block_reward)
                break
            nonce += 1
            
    def add_delegate(self, delegate):
        self.delegate_list.append(delegate)
        
    def select_delegates(self):
        self.delegate_list.sort(key=lambda x: x.stake, reverse=True)
        return self.delegate_list[:21]
    
class Delegate:
    def __init__(self, name, stake):
        self.name = name
        self.stake = stake
        self.tokens = 0
        
    def reward_tokens(self, amount):
        self.tokens += amount
        
    def __lt__(self, other):
        return self.stake < other.stake

# Initialize blockchain
blockchain = Blockchain()

# Add delegates
delegate1 = Delegate('Alice', 100)
delegate2 = Delegate('Bob', 50)
delegate3 = Delegate('Charlie', 25)
blockchain.add_delegate(delegate1)
blockchain.add_delegate(delegate2)
blockchain.add_delegate(delegate3)

# Select delegates for mining
selected_delegates = blockchain.select_delegates()

# Mine blocks
for delegate in selected_delegates:
    blockchain.mine_block(delegate)

# Print the blockchain
